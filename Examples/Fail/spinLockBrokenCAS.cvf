/*
 * Herlihy/Shavit-style compare and swap lock,
 * with an intentionally broken compare and swap.
 */

shared bool lock;  // True iff the lock is taken.
thread bool test;  // Used when trying to take the lock.

/*
 * Locks the CAS lock.
 */
method lock() {
  {| emp |}
    do {
      {| emp |}
        test = false;
      {| local { test == false } |}
        <| if (lock == test) { lock = true; } /* test = lock; */ |>
      {| if (test == false) { holdLock() } |}
    } while (test == true);
  {| holdLock() |}
}

/*
 * Unlocks the CAS lock.
 */
method unlock() {
  {| holdLock() |}
    <| lock = false; |>
  {| emp |}
}

view holdLock();
constraint holdLock() -> lock == true;  // Identity of lock.
constraint holdLock() * holdLock() -> false;  // Mutual exclusion
