/*
 * Two-process Dekker's algorithm in Starling.
 * UNFINISHED
 */

view Idle(int tid), Want(int tid), Acquiring(int tid), MightBackOff(int tid), BackingOff(int tid), BackedOff(int tid), Resuming(int tid), HoldLock(int tid), Releasing(int tid);

shared bool[2] want;
shared int turn;

thread bool other_wants;
thread int other_turn;

constraint emp -> turn == 0 || turn == 1;

constraint Idle(tid)         -> tid == 0 || tid == 1;
constraint Want(tid)         -> tid == 0 || tid == 1;
constraint Acquiring(tid)    -> tid == 0 || tid == 1;
constraint MightBackOff(tid) -> tid == 0 || tid == 1;
constraint BackingOff(tid)   -> tid == 0 || tid == 1;
constraint BackedOff(tid)    -> tid == 0 || tid == 1;
constraint Resuming(tid)     -> tid == 0 || tid == 1;
constraint HoldLock(tid)     -> tid == 0 || tid == 1;
constraint Releasing(tid)    -> tid == 0 || tid == 1;

constraint Idle(x) * Idle(y) -> x != y;
constraint Want(x) * Want(y) -> x != y;
constraint Acquiring(x) * Acquiring(y) -> x != y;
constraint MightBackOff(x) * MightBackOff(y) -> x != y;
constraint BackingOff(x) * BackingOff(y) -> x != y;
constraint Resuming(x) * Resuming(y) -> x != y;
constraint Releasing(x) * Releasing(y) -> x != y;

constraint HoldLock(x) * HoldLock(y) -> false;

method lock(int tid) {
    {| Idle(tid) |}
        <want[tid] = true>;
    {| Want(tid) |}
        <other_wants = want[tid]>;
    {| if (other_wants) { MightBackOff(tid) } else { HoldLock(tid) } |}
        while (other_wants) {
            {| MightBackOff(tid) |}
                <other_turn = turn>;
            {| if (other_turn != tid) { BackingOff(tid) } else { Want(tid) } |}
                if (other_turn != tid) {
                    {| BackingOff(tid) |}
                        <want[tid] = false>;
                    {| BackedOff(tid) |}
                        do {
                            {| BackedOff(tid) |}
                            <other_turn = turn>;
                            {| if (other_turn != tid) { BackedOff(tid) } else { Resuming(tid) } |}
                        } while (other_turn != tid);
                    {| Resuming(tid) |}
                        <want[tid] = true>;
                    {| Want(tid) |}
                }
            {| Want(tid) |}
                <other_wants = want[tid]>;
            {| if (other_wants) { MightBackOff(tid) } else { HoldLock(tid) } |}
        }
    {| HoldLock(tid) |}
}

method unlock(int tid) {
    {| HoldLock(tid) |}
        <turn = (tid + 1)%2>;
    {| Releasing(tid) |}
        <want[tid] = false>;
    {| Idle(tid) |}
}
