/*
 * Linux-style ticket lock.
 */

shared int ticket;  // The next ticket to hand out.
shared int serving; // The current ticket holding the lock.

/*
 * Locks the ticket lock.
 */
method lock() {
  {| emp |}
    thread int t;  // The thread's current ticket.
    thread int s;  // The thread's current view of serving.
    <| t = ticket++; |>
  {| Tick(t) |}
    do {
      {| Tick(t) |}
        <| s = serving; |>
      {| if s == t { Lock } else { Tick(t) } |}
    } while s != t;
  {| Lock |}
}

/*
 * Unlocks the ticket lock.
 */
method unlock() {
  {| Lock |} <| serving++; |> {| emp |}
}

view Tick(int t), Lock;

// Invariant
constraint emp                 -> ticket >= serving;

// Predicate definitions
constraint Tick(t)             -> ticket > t;
constraint Lock                -> ticket != serving;

// Interactions
constraint Lock     * Tick(t)  -> serving != t;
constraint Tick(ta) * Tick(tb) -> ta != tb;
constraint Lock     * Lock     -> false;
