/* Atomic reference counter
 * Example taken from Derek / Rust: http://www.mpi-sws.org/~dreyer/talks/talk-dagstuhl16.pdf
 * Modified from Examples/Pass/arc.cvf
 * Non-allocated version of Examples/PassGH/arc.cvf
 */

shared bool free;
shared int count;

thread bool f;
thread int c;

view iter Arc;
view CountWas(int c);

method clone() {
  {| Arc |} <| count++; |> {| Arc * Arc |}
}

method print() {
  {| Arc |}
    <| f = free; |>
  {| if f == true { false } else { Arc } |}
    if f == true {
      {| false |} <| error; |> {| false |}
    }
  {| Arc |}
}

method drop() {
  {| Arc |}
    <| c = count--; |>
  {| CountWas(c) |}
    if c == 1 {
      {| CountWas(1) |} <| free = true; |> {| emp |}
    }
  {| emp |}
}

constraint iter[n] Arc ->
    n > 0 => (free == false && n <= count);

constraint CountWas(c) ->
    c == 1 => (free == false && count == 0);

constraint CountWas(m) * CountWas(n) ->
    (m != 1) || (n != 1);

